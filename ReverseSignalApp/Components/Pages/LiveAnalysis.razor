@page "/live-analysis"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using ReverseSignalApp.Services
@using System.Diagnostics


@inject IJSRuntime JS
<style>
    .__arc_login_overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.55);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2000;
    }

    .__arc_login_card {
        width: 360px;
        max-width: 95%;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 6px 30px rgba(0,0,0,0.35);
        padding: 18px;
    }

    .__arc_login_header {
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 12px;
        color: #222;
    }

    .__arc_login_input {
        width: 100%;
        padding: 8px 10px;
        margin-top: 6px;
        border: 1px solid #d0d7de;
        border-radius: 6px;
    }

    .__arc_login_btn {
        margin-top: 14px;
        width: 100%;
    }

    .__arc_login_error {
        margin-top: 8px;
        color: #b00020;
        font-weight: 600;
    }
</style>
@if (!IsAuthenticated)
{
    <!-- LOGIN POPUP -->
    <div class="__arc_login_overlay">
        <div class="__arc_login_card">
            <div class="__arc_login_header">ArcSoftwares — Yetkili Giriş</div>

            <div>
                <label>Kullanıcı Adı</label>
                <input class="__arc_login_input" @bind="username" @bind:event="oninput" />
            </div>

            <div style="margin-top:8px;">
                <label>Şifre</label>
                <input type="password" class="__arc_login_input" @bind="password" @bind:event="oninput" />
            </div>

            <button class="btn btn-success __arc_login_btn" @onclick="TryLoginAsync" disabled="@isLoggingIn">
                @(isLoggingIn ? "Giriş yapılıyor..." : "Giriş Yap")
            </button>

            @if (!string.IsNullOrEmpty(loginError))
            {
                <div class="__arc_login_error">@loginError</div>
            }
        </div>
    </div>
}
else
{
    @* --- Burada senin mevcut LiveAnalysis UI’n var --- *@
    @* Hiçbir şeyi değiştirme, sadece bu else içine al *@

    @* örnek: *@
    <div>
        <h3>Canlı Analiz Paneli</h3>
        @* mevcut butonlar, form, sonuç kartları vs burada kalacak *@
    </div>
}

<h3 class="mb-3">⚽ Canlı Maç Analizi</h3>
<!-- IMZA (sayfa üstüne) -->

<div class="mb-3">
    <button class="btn btn-outline-primary" @onclick="LoadLiveMatchesAsync" disabled="@isLoading">
        🔄 Canlı Maçları Yenile
    </button>
</div>

@if (isLoading)
{
    <div class="d-flex align-items-center">
        <div class="spinner-border text-info me-2" role="status">
            <span class="visually-hidden">Yükleniyor...</span>
        </div>
        <strong>@loadingMessage</strong>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (liveMatches.Count == 0)
{
    <div class="alert alert-warning">Şu anda canlı maç bulunamadı.</div>
}
else
{
    <div class="mb-3">
        <label class="form-label">Bir maç seçin:</label>
        <select class="form-select" @onchange="OnMatchChanged" disabled="@isAnalyzing">
            <option value="">-- Seçiniz --</option>
            @foreach (var match in liveMatches)
            {
                <option value="@match.Id">@match.HomeTeam.Name @match.Score?.Home - @match.Score?.Away @match.AwayTeam.Name (@match.Status)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <button class="btn btn-success" @onclick="StartAnalysisAsync">
            🚀 Analizi Başlat
        </button>
        <h4 style=" font-size:0.9rem; opacity:0.9;">
            @aboutText
        </h4>
    </div>
}

@if (isAnalyzing)
{
    <div class="d-flex align-items-center">
        <div class="spinner-border text-success me-2" role="status">
            <span class="visually-hidden">Analiz ediliyor...</span>
        </div>
        <strong>Analiz devam ediyor...</strong>
    </div>
}

@if (!string.IsNullOrEmpty(analysisResult))
{
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h5 class="card-title">🤖 LLaMA Analizi</h5>
            <pre style="white-space: pre-wrap; word-break: break-word;">@SplitLongLines(analysisResult, 100)</pre>

        </div>
    </div>
}

@code {
    private List<MatchModel> liveMatches = new();
    private bool isLoading = false;
    private bool isAnalyzing = false;
    private string? selectedMatchId;
    private string? errorMessage;
    private string? loadingMessage;
    private string? analysisResult;
    private string? aboutText;
    private bool IsAuthenticated = false;
    private string username = string.Empty;
    private string password = string.Empty;
    private string loginError = string.Empty;
    private bool isLoggingIn = false;

    
    protected override async Task OnInitializedAsync()
    {
        await LogAsync("🧠 Component initialized");
        await LoadLiveMatchesAsync();
        aboutText = await AboutService.AboutApp();
    }

    private async Task TryLoginAsync()
    {
        loginError = string.Empty;
        isLoggingIn = true;
        StateHasChanged();

        try
        {
            // 🔹 Artık AuthService üzerinden kontrol ediyoruz
            bool isValid = await ReverseSignalApp.Services.AuthService.LoginAsync(username, password);

            if (isValid)
            {
                IsAuthenticated = true;
                username = string.Empty;
                password = string.Empty;
                await Task.Delay(100); // yumuşak geçiş
            }
            else
            {
                loginError = "Hatalı giriş! Kullanıcı adı veya şifre yanlış.";
            }
        }
        catch (Exception ex)
        {
            loginError = "Sistem hatası: " + ex.Message;
        }
        finally
        {
            isLoggingIn = false;
            StateHasChanged();
        }
    }

    private async Task LoadLiveMatchesAsync()
    {
        await LogAsync("📡 Loading live matches...");
        try
        {
            isLoading = true;
            loadingMessage = "Canlı maçlar yükleniyor...";
            errorMessage = null;
            liveMatches.Clear();

            var list = await FootballDataService.Instance.GetLiveTodayAsync();
            liveMatches = list ?? new();

            await LogAsync($"✅ Loaded {liveMatches.Count} matches");

            if (liveMatches.Count == 0)
                errorMessage = "Şu anda analiz edilebilir canlı maç yok.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Maçlar yüklenirken hata: {ex.Message}";
            await LogAsync($"❌ Error while loading matches: {ex}");
        }
        finally
        {
            isLoading = false;
            loadingMessage = null;
        }
    }

    private void OnMatchChanged(ChangeEventArgs e)
    {
        selectedMatchId = e?.Value?.ToString()?.Trim();
        Console.WriteLine($"[DEBUG] SelectedMatchId = {selectedMatchId}");
        Debug.WriteLine($"[DEBUG] SelectedMatchId = {selectedMatchId}");
        JS.InvokeVoidAsync("console.log", $"[JS DEBUG] SelectedMatchId = {selectedMatchId}");
        StateHasChanged();
    }

    private async Task StartAnalysisAsync()
    {
        await LogAsync($"🚀 StartAnalysisAsync triggered with selectedMatchId={selectedMatchId}");

        if (string.IsNullOrWhiteSpace(selectedMatchId))
        {
            errorMessage = "Lütfen önce bir maç seçin.";
            await LogAsync("⚠️ StartAnalysisAsync aborted: match not selected");
            return;
        }

        try
        {
            isAnalyzing = true;
            errorMessage = null;
            analysisResult = null;

            var match = liveMatches.FirstOrDefault(m => m.Id.ToString() == selectedMatchId);
            if (match == null)
            {
                errorMessage = "Seçilen maç bulunamadı.";
                await LogAsync("⚠️ Match not found in list");
                return;
            }

            await LogAsync($"🧩 Context build started for match: {match.HomeTeam.Name} vs {match.AwayTeam.Name}");
            var context = await FootballDataService.Instance.BuildFocalContextAsync(match, 10);
            var stats = await FootballDataService.Instance.GetLiveStatisticsAsync(match.Id);
            await LogAsync("🧠 Running LLaMA analysis...");
            analysisResult = await LiveAnalysisService.Instance.AnalyzeLiveMatchAsync(match, context, stats);

            await LogAsync("✅ Analysis complete");
        }
        catch (Exception ex)
        {
            errorMessage = $"Analiz sırasında hata oluştu: {ex.Message}";
            await LogAsync($"❌ Exception: {ex}");
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }

    private async Task LogAsync(string message)
    {
        Console.WriteLine(message);
        Debug.WriteLine(message);
        await JS.InvokeVoidAsync("console.log", message);
    }

    private static string SplitLongLines(string text, int maxLineLength)
    {
        if (string.IsNullOrWhiteSpace(text))
            return text;

        var lines = text.Split('\n');
        var builder = new System.Text.StringBuilder();

        foreach (var line in lines)
        {
            for (int i = 0; i < line.Length; i += maxLineLength)
            {
                int len = Math.Min(maxLineLength, line.Length - i);
                builder.AppendLine(line.Substring(i, len));
            }
        }

        return builder.ToString();
    }

}
